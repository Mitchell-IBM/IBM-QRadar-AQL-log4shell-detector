<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<content>
    <custom_function>
        <namespace>exploitdetect</namespace>
        <name>log4j</name>
        <return_type>Boolean</return_type>
        <parameter_types>String Number</parameter_types>
        <execute_function_name>execute</execute_function_name>
        <script_engine>javascript</script_engine>
        <script>
// Prepare the detection strings and plain strings
var DETECTION_STRINGS = ['${jndi:'];

var PLAIN_STRINGS = {
	"https://gist.github.com/Neo23x0/e4c8b03ff8cdf1fa63b7d15db6e3860b#gistcomment-3991502": [
	  " header with value of BadAttributeValueException: "
	],
	"https://gist.github.com/Neo23x0/e4c8b03ff8cdf1fa63b7d15db6e3860b#gistcomment-3991700": [
	  "at java.naming/com.sun.jndi.url.ldap.ldapURLContext.lookup(",
	  ".log4j.core.lookup.JndiLookup.lookup(JndiLookup"
	],
	"https://github.com/Neo23x0/log4shell-detector/issues/5#issuecomment-991963675": [
	  '${base64:JHtqbmRp'
	],
	"https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce/issues/1": [
	  'Reference Class Name: foo'
	]
};		
		

function execute(raw_payload, maximum_distance) {
  if (!raw_payload) {
    return false;
  }

  // Setup the detection pad
  var detection_pad = {};
  
  for (var i = 0; i &lt; DETECTION_STRINGS.length; i++) {
	var ds = DETECTION_STRINGS[i];
	detection_pad[ds] = {
	  "chars": ds.split(""),
	  "maximum_distance": maximum_distance,
	  "current_distance": 0,
	  "level": 0
	};
  }
  
  raw_payload = unicodedecoding(raw_payload);
  raw_payload = urldecoding(raw_payload);

  // Decode any use of base64 that includes the base64 tag
  var decoded_raw_payload = raw_payload.replace(/\$\{base64:([^}]*?)}/gi, base64replace);

  // Basic detection of plain strings. Immediately return true without having to step through characters
  for (var key in PLAIN_STRINGS) {
    for (var array_index in PLAIN_STRINGS[key]) {
      var bad_string = PLAIN_STRINGS[key][array_index]
      if (decoded_raw_payload.indexOf(bad_string) != -1) {

        return true;
      }
    }
  }
  
  // Exit the code if the ${ part of the string is not found. The index is also used later to speed up the analysis
  var malstring_start_index = decoded_raw_payload.indexOf("${")
  if (malstring_start_index == -1) return false;

  // Setup for stepping through the payload character by character
  decoded_raw_payload = decoded_raw_payload.toLowerCase();
  var payload_chars = decoded_raw_payload.split("");
  
  // Jump straight to the first instance of ${ to save time on iterations
  for (var char_index = malstring_start_index; char_index &lt; payload_chars.length; char_index++) {
    var c = payload_chars[char_index];
    for (var ds in detection_pad) {

      if (c === detection_pad[ds]["chars"][detection_pad[ds]["level"]]) {
        if (detection_pad[ds]["level"] == 1 &amp;&amp; !(detection_pad[ds]["current_distance"] == 1)) {
          // Reset if the $ is not followed immediately by the {
          detection_pad[ds]["current_distance"] = 0;
          detection_pad[ds]["level"] = 0;
        }
        detection_pad[ds]["level"] += 1;
        detection_pad[ds]["current_distance"] = 0;
      }

      if (detection_pad[ds]["level"] > 0) {
        detection_pad[ds]["current_distance"] += 1;

        // If max distance is exceeded, reset the detection pad and go again
        if (detection_pad[ds]["current_distance"] > detection_pad[ds]["maximum_distance"]) {
          detection_pad[ds]["current_distance"] = 0
          detection_pad[ds]["level"] = 0
        }
      }

      // Malicious string detected
      if ((detection_pad[ds]["chars"]).length == detection_pad[ds]["level"]) {

        return true;
      }
	  
	  if (detection_pad[ds]["current_distance"] == 0 &amp;&amp; detection_pad[ds]["level"] == 0) {
        char_index = decoded_raw_payload.indexOf("${", char_index) - 1;
        if (char_index &lt; 0) return false;
      }
    }
  }

  return false;
}

function unicodedecoding(raw_payload) {
  var old_raw_payload = "";
  while(raw_payload.indexOf("\\u") != -1) {
    old_raw_payload = raw_payload;

    // Replace unicode character strings to their UTF8 format
    raw_payload = raw_payload.replace(/\\u[A-F0-9]{4}/gi, unicodereplace);

    if (raw_payload.indexOf("%") != -1) {
      raw_payload = urldecoding(raw_payload);
    }
    if (raw_payload === old_raw_payload) break;
  }
  return raw_payload;
}


function urldecoding(raw_payload) {
  // URL decodes the payloads
  var old_raw_payload = "";
  while (raw_payload.indexOf("%") != -1) {
    old_raw_payload = raw_payload;
    try {
      raw_payload = decodeURIComponent(raw_payload);
    } catch (e) {
      // decodeURIComponent can throw errors so we default to unescape.
      raw_payload = unescape(raw_payload);
    }

    if (raw_payload.indexOf("\\u") != -1) {
      raw_payload = unicodedecoding(raw_payload);
    }

    if (raw_payload === old_raw_payload) break;
  }
  return raw_payload;
}


function base64replace(match, p1) {
  // Base64 decoding using an AQL Utilities function
  try {
    var unbase64payload = Utils.general.base64Decode(p1);
    return unbase64payload;
  } catch(err) {
    // Catches occurrences of the regex used to detect the base64 tags - stops NullPointerExceptions
    return match;
  }
}

function unicodereplace(match, p1) {
  try {
    var urlencodedpayload = JSON.parse('"' + match.replace('"', '\\"') + '"');
    return urlencodedpayload;
  } catch(err) {
    // Catches occurrences of the regex used to detect the unicode - stops NullPointerExceptions
    return match;
  }
}
        </script>
        <username>admin</username>
		<author>Mitchell Hale (IBM Security - UKSOC)</author>
    </custom_function>
</content>